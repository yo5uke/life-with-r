{
  "hash": "9b41ef7eba2289ff4715f2ca74e591ae",
  "result": {
    "engine": "knitr",
    "markdown": "# RStudioをいじってみる\n\nこの章では、RStudioの基本的な使い方を説明します。RStudioをインストールしたばかりの方はぜひ一度試してみてください。\n\n:::{.callout-caution}\nここではRの関数については扱いません。\n:::\n\n## 初期画面\n\nインストールしたばかりのRStudioは以下のようなレイアウトになっています。\n\n![RStudio](figures/try_rstudio/rstudio.png)\n\n- 左上：ソースコード画面\n    - Rのスクリプトを書く画面\n- 左下：コンソール画面\n    - 入力したスクリプトが実行される画面\n    - 直接入力も可能\n- 右上：環境画面\n    - 実行中に作成した変数や関数を表示する画面\n- 右下：ファイル画面\n    - ファイルが表示される画面\n    - ここからファイルを開くことが可能\n\n基本的にコードを書くのはソースコード画面です。コンソール画面に直接入力し実行することもできますが、再現可能性の観点からもあまり使用頻度は高くありません^[パッケージのインストールやコードの動作確認など、用途によっては直接入力する場合もあります。]。\n\n## デザインを変更してみる\n\n### レイアウトを変更してみる\n\n上下左右にそれぞれ画面（ペインとも呼びます）が分かれていますが、これらの配置を変更することが可能です。\n\nここでは試しにコンソール画面を右上に配置し、環境画面を左下に配置してみます^[私はスクリプトと実行結果を横に並べて見たいのでこのように配置を変更しています。]。\n\n画面上部の「Tools」>「Global Options...」と進みます。\n\n![](figures/try_rstudio/global_options.png)\n\n続いて左から「Pane Layout」に進み、EnvironmentをConsoleに変更します。\n\n![Consoleを選ぶと、Environmentと入れ替わります](figures/try_rstudio/pane_layout.png)\n\n変更してウィンドウ下部のOKをクリックすれば、右上と左下が入れ替わった画面になります。他も自由に変更できるので、好みに合わせて変更してみてください。\n\n### テーマを変更してみる\n\nRStudioではテーマを変更することもできます。ここでは試しにダークモードに変更してみましょう。\n\n同様に「Tools」>「Global Options...」と進み、今度は左から「Appearance」を選びます。\n\n![Editor themeから変更できます](figures/try_rstudio/change_theme.png)\n\nEditor themeにはたくさんのテーマが用意されており、好みに合わせて変更できます。ここでは試しに「Pastel on Dark」を選択しています。\n\nまた、Editor fontからはフォントを選択できますので、こちらも好みに合わせて変更してみてください。「Cascadia Code」だと本ページが採用しているような`< - `が`<-`のように矢印として表示されるようになり、私自身は面白くて使用しています。\n\n## 新しいスクリプトファイルを開く\n\nデフォルトでは、ソースコード画面に`Untitled1`というRスクリプトファイルが開いています。ここでは、新しいコードファイルを開く方法を試してみましょう。\n\nまず、画面左上の をクリックし、「R Script」を選択します。すると、ソースコード画面に`Untitled2`という新しいファイルが開かれるはずです。\n\nこのセクションでは、Rスクリプトにコードを書き、保存し、実行する流れを確認します。\n\n1. スクリプトに`1 + 1`と書く\n    - コードは何でもよいです\n2. 上部にある![](figures/try_rstudio/save.png)をクリックし、任意の場所と名前で保存する\n3. 実行する\n    1. コード行をクリックしてカーソルを置き、ソースコード画面右上の「Run」で実行\n    2. コード行をクリックしてカーソルを置き、{{< kbd win=Ctrl-Enter mac=Command-Enter >}}で実行\n\n実行は、2つのいずれでも同じ動作をします。また、カーソルは必ずしもコードの先頭や一番後ろを選択しておく必要はありません。コードの途中にカーソルがあっても、その行（複数行にまたがる場合は一連の関数）が実行されます。\n\n![コードの実行](figures/try_rstudio/run_code.gif)\n\nスクリプトファイルは保存すると`.R`ファイルとして保存されますが、他にもR Markdown（`.Rmd`）やQuarto Markdown（`.qmd`）ファイルなどがあります。R MarkdownとQuarto Markdownは似たファイルですが、どちらもRスクリプトファイルとは仕様が異なります。\n\nこれらのファイルについては後の章で説明しますが、いずれもRコードを保存するためのファイルです^[Quarto MarkdownはPythonにも対応しています。]。\n\n## データを見る\n\nRでは、データを変数に格納して（名前を付けて）扱うことが多いです。ここでは、変数にデータを格納し、その内容を確認する方法を試してみます。\n\nRにはデフォルトでいくつかのデータセットが用意されており、ファイルを用意していなくてもデータを扱う練習ができます。ここでは、`mtcars`データセットを使ってみます^[`mtcars`は自動車の性能に関するデータセットです。]。\n\n[@] 新しいスクリプトファイルを開く\n\n上で書いたように、新しいスクリプトファイルを開きます。\n\n[@] データを格納\n\nスクリプトに以下のコードを書きます。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- mtcars\n```\n:::\n\n\n自分のデータを使う場合は`read.csv()`などの関数でデータを読み込み、名前を付けて格納するのですが、今回は`mtcars`が用意されていますので、それを`data`という名前の変数に格納しています。格納をはじめとする基本的な関数は後の章で説明しますので、ここではコードをそのまま書いてみてください（現在準備中）。\n\n[@] コードを実行\n\nこれを{{< kbd win=Ctrl-Enter mac=Command-Enter >}}あるいはRunボタンで実行します。\n\n実行すると、左下の環境変数画面に`data`という変数が追加されます。\n\n![](figures/try_rstudio/view_data-1.png)\n\n[@] データを確認\n\n変数をクリックすると、データの中身を確認できます。`data`とある行をクリックしてみてください^[これはクリックすることで自動で`View(data)`という関数を実行しています。コンソール画面をご確認ください。]。\n\nスクリプト画面がデータビューアに切り替わり、データの中身が確認できます。\n\n![データの中身を確認](figures/try_rstudio/view_data-2.png)\n\nMazda RX4やDatsun 710など、車の名前が行名として表示されているのがわかります。\n\n画面が小さければ、各ペインの境界をドラッグして大きさを変更するか、ペインの右上にあるウィンドウのアイコンから下の変数画面をたたむことができます。\n\n慣れは要るかもしれませんが、データビューアでは並び替えができたり、フィルターをかけられたりと便利ですので、ぜひ使ってみてください。\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}