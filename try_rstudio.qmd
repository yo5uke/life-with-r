# RStudioをいじってみる

この章では、RStudioの基本的な使い方を説明します。RStudioをインストールしたばかりの方はぜひ一度試してみてください。

:::{.callout-caution}
ここではRの関数については扱いません。
:::

## 初期画面

インストールしたばかりのRStudioは以下のようなレイアウトになっています。

![RStudio](figures/try_rstudio/rstudio.png)

- 左上：ソースコード画面
    - Rのスクリプトを書く画面
- 左下：コンソール画面
    - 入力したスクリプトが実行される画面
    - 直接入力も可能
- 右上：環境画面
    - 実行中に作成した変数や関数を表示する画面
- 右下：ファイル画面
    - ファイルが表示される画面
    - ここからファイルを開くことが可能

基本的にコードを書くのはソースコード画面です。コンソール画面に直接入力し実行することもできますが、再現可能性の観点からもあまり使用頻度は高くありません^[パッケージのインストールやコードの動作確認など、用途によっては直接入力する場合もあります。]。

## デザインを変更してみる

### レイアウトを変更してみる

上下左右にそれぞれ画面（ペインとも呼びます）が分かれていますが、これらの配置を変更することが可能です。

ここでは試しにコンソール画面を右上に配置し、環境画面を左下に配置してみます^[私はスクリプトと実行結果を横に並べて見たいのでこのように配置を変更しています。]。

画面上部の「Tools」>「Global Options...」と進みます。

![](figures/try_rstudio/global_options.png)

続いて左から「Pane Layout」に進み、EnvironmentをConsoleに変更します。

![Consoleを選ぶと、Environmentと入れ替わります](figures/try_rstudio/pane_layout.png)

変更してウィンドウ下部のOKをクリックすれば、右上と左下が入れ替わった画面になります。他も自由に変更できるので、好みに合わせて変更してみてください。

### テーマを変更してみる

RStudioではテーマを変更することもできます。ここでは試しにダークモードに変更してみましょう。

同様に「Tools」>「Global Options...」と進み、今度は左から「Appearance」を選びます。

![Editor themeから変更できます](figures/try_rstudio/change_theme.png)

Editor themeにはたくさんのテーマが用意されており、好みに合わせて変更できます。ここでは試しに「Pastel on Dark」を選択しています。

また、Editor fontからはフォントを選択できますので、こちらも好みに合わせて変更してみてください。「Cascadia Code」だと本ページが採用しているような`< - `が`<-`のように矢印として表示されるようになり、私自身は面白くて使用しています。

## 新しいスクリプトファイルを開く

デフォルトでは、ソースコード画面に`Untitled1`というRスクリプトファイルが開いています。ここでは、新しいコードファイルを開く方法を試してみましょう。

まず、画面左上の をクリックし、「R Script」を選択します。すると、ソースコード画面に`Untitled2`という新しいファイルが開かれるはずです。

このセクションでは、Rスクリプトにコードを書き、保存し、実行する流れを確認します。

1. スクリプトに`1 + 1`と書く
    - コードは何でもよいです
2. 上部にある![](figures/try_rstudio/save.png)をクリックし、任意の場所と名前で保存する
3. 実行する
    1. コード行をクリックしてカーソルを置き、ソースコード画面右上の「Run」で実行
    2. コード行をクリックしてカーソルを置き、{{< kbd win=Ctrl-Enter mac=Command-Enter >}}で実行

実行は、2つのいずれでも同じ動作をします。また、カーソルは必ずしもコードの先頭や一番後ろを選択しておく必要はありません。コードの途中にカーソルがあっても、その行（複数行にまたがる場合は一連の関数）が実行されます。

![コードの実行](figures/try_rstudio/run_code.gif)

スクリプトファイルは保存すると`.R`ファイルとして保存されますが、他にもR Markdown（`.Rmd`）やQuarto Markdown（`.qmd`）ファイルなどがあります。R MarkdownとQuarto Markdownは似たファイルですが、どちらもRスクリプトファイルとは仕様が異なります。

これらのファイルについては後の章で説明しますが、いずれもRコードを保存するためのファイルです^[Quarto MarkdownはPythonにも対応しています。]。

## データを見る

Rでは、データを変数に格納して（名前を付けて）扱うことが多いです。ここでは、変数にデータを格納し、その内容を確認する方法を試してみます。

Rにはデフォルトでいくつかのデータセットが用意されており、ファイルを用意していなくてもデータを扱う練習ができます。ここでは、`mtcars`データセットを使ってみます^[`mtcars`は自動車の性能に関するデータセットです。]。

[@] 新しいスクリプトファイルを開く

上で書いたように、新しいスクリプトファイルを開きます。

[@] データを格納

スクリプトに以下のコードを書きます。

```{r}
data <- mtcars
```

自分のデータを使う場合は`read.csv()`などの関数でデータを読み込み、名前を付けて格納するのですが、今回は`mtcars`が用意されていますので、それを`data`という名前の変数に格納しています。格納をはじめとする基本的な関数は後の章で説明しますので、ここではコードをそのまま書いてみてください（現在準備中）。

[@] コードを実行

これを{{< kbd win=Ctrl-Enter mac=Command-Enter >}}あるいはRunボタンで実行します。

実行すると、左下の環境変数画面に`data`という変数が追加されます。

![](figures/try_rstudio/view_data-1.png)

[@] データを確認

変数をクリックすると、データの中身を確認できます。`data`とある行をクリックしてみてください^[これはクリックすることで自動で`View(data)`という関数を実行しています。コンソール画面をご確認ください。]。

スクリプト画面がデータビューアに切り替わり、データの中身が確認できます。

![データの中身を確認](figures/try_rstudio/view_data-2.png)

Mazda RX4やDatsun 710など、車の名前が行名として表示されているのがわかります。

画面が小さければ、各ペインの境界をドラッグして大きさを変更するか、ペインの右上にあるウィンドウのアイコンから下の変数画面をたたむことができます。

慣れは要るかもしれませんが、データビューアでは並び替えができたり、フィルターをかけられたりと便利ですので、ぜひ使ってみてください。

